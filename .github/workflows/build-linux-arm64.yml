name: Linux ARM64 Build & Package

on:
  workflow_dispatch:
  workflow_call:

jobs:
  # Build core components in parallel
  build-core:
    runs-on: ubuntu-22.04
    timeout-minutes: 40
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Configure Git
        run: |
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: |
            ainative-studio/package-lock.json
            ainative-studio/build/package-lock.json
      
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libkrb5-dev
      
      - name: Install build dependencies
        working-directory: ainative-studio/build
        run: |
          for i in {1..5}; do
            npm ci && break
            if [ $i -eq 5 ]; then
              echo "npm ci in build/ failed too many times" >&2
              exit 1
            fi
            echo "npm ci failed $i, trying again..."
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Install dependencies
        working-directory: ainative-studio
        run: |
          for i in {1..5}; do
            npm ci && break
            if [ $i -eq 5 ]; then
              echo "npm ci failed too many times" >&2
              exit 1
            fi
            echo "npm ci failed $i, trying again..."
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Cache node build cache
        uses: actions/cache@v4
        with:
          path: |
            ainative-studio/node_modules/.cache
            ainative-studio/extensions/*/node_modules/.cache
          key: node-cache-${{ runner.os }}-arm64-${{ hashFiles('ainative-studio/package-lock.json') }}
          restore-keys: |
            node-cache-${{ runner.os }}-arm64-
      
      - name: Cache gulp cache
        uses: actions/cache@v4
        with:
          path: ~/.gulp-cache
          key: ${{ runner.os }}-arm64-gulp-${{ hashFiles('ainative-studio/package-lock.json', 'ainative-studio/build/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-arm64-gulp-
      
      - name: Build React components
        working-directory: ainative-studio
        run: npm run buildreact
        env:
          NODE_OPTIONS: "--max-old-space-size=8192"
      
      - name: Compile TypeScript
        working-directory: ainative-studio
        run: npm run gulp compile-build-without-mangling
        env:
          NODE_OPTIONS: "--max-old-space-size=8192"
          UV_THREADPOOL_SIZE: 64
      
      - name: Build extensions in parallel
        working-directory: ainative-studio
        run: |
          # Build critical extensions first
          npm run gulp compile-extension:configuration-editing &
          npm run gulp compile-extension:css-language-features &
          npm run gulp compile-extension:typescript-language-features &
          npm run gulp compile-extension:git &
          wait
          
          # Build remaining extensions in parallel batches
          npm run gulp compile-extension:debug-auto-launch &
          npm run gulp compile-extension:debug-server-ready &
          npm run gulp compile-extension:emmet &
          npm run gulp compile-extension:extension-editing &
          wait
          
          npm run gulp compile-extension:git-base &
          npm run gulp compile-extension:github &
          npm run gulp compile-extension:github-authentication &
          npm run gulp compile-extension:grunt &
          wait
          
          npm run gulp compile-extension:gulp &
          npm run gulp compile-extension:html-language-features &
          npm run gulp compile-extension:ipynb &
          npm run gulp compile-extension:jake &
          wait
          
          npm run gulp compile-extension:json-language-features &
          npm run gulp compile-extension:markdown-language-features &
          npm run gulp compile-extension:markdown-math &
          npm run gulp compile-extension:media-preview &
          wait
          
          npm run gulp compile-extension:merge-conflict &
          npm run gulp compile-extension:terminal-suggest &
          npm run gulp compile-extension:microsoft-authentication &
          npm run gulp compile-extension:notebook-renderers &
          wait
          
          npm run gulp compile-extension:npm &
          npm run gulp compile-extension:php-language-features &
          npm run gulp compile-extension:references-view &
          npm run gulp compile-extension:search-result &
          wait
          
          npm run gulp compile-extension:simple-browser &
          npm run gulp compile-extension:tunnel-forwarding &
          npm run gulp compile-extension:vscode-api-tests &
          npm run gulp compile-extension:vscode-colorize-tests &
          wait
          
          # Finish remaining extensions
          npm run gulp compile-extension:vscode-colorize-perf-tests || true
          npm run gulp compile-extension:vscode-test-resolver || true
          npm run gulp compile-extension:vscode-selfhost-test-provider || true
          npm run gulp compile-extension:vscode-selfhost-import-aid || true
        env:
          NODE_OPTIONS: "--max-old-space-size=6144"
      
      - name: Minify and package
        working-directory: ainative-studio
        run: |
          npm run gulp minify-vscode
          npm run gulp vscode-linux-arm64-min-ci
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_OPTIONS: "--max-old-space-size=8192"
          UV_THREADPOOL_SIZE: 64
      
      - name: Verify build output
        run: |
          if [ ! -d "VSCode-linux-arm64" ]; then
            echo "::error::Build output directory not found!"
            echo "Contents of current directory:"
            ls -la
            echo "Contents of parent directory:"
            ls -la ../
            exit 1
          fi
      
      - name: Create archive
        run: |
          if [ -d "VSCode-linux-arm64" ]; then
            cd VSCode-linux-arm64
            tar --warning=no-file-changed -czf ../ainative-studio-linux-arm64.tar.gz . || true
            cd ..
          elif [ -d "../VSCode-linux-arm64" ]; then
            cd ../VSCode-linux-arm64
            tar --warning=no-file-changed -czf ainative-studio-linux-arm64.tar.gz . || true
            mv ainative-studio-linux-arm64.tar.gz ../ainative-studio/
          else
            echo "::error::VSCode-linux-arm64 directory not found in current or parent directory!"
            exit 1
          fi
        working-directory: ainative-studio
      
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ainative-studio-linux-arm64
          path: ainative-studio/ainative-studio-linux-arm64.tar.gz
          retention-days: 30

  package:
    needs: build-core
    runs-on: ubuntu-22.04
    timeout-minutes: 30
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: |
            ainative-studio/package-lock.json
            ainative-studio/build/package-lock.json
      
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libkrb5-dev libgssapi-krb5-2 libgssapi3-heimdal rpm
      
      - name: Install build dependencies
        working-directory: ainative-studio/build
        run: |
          for i in {1..5}; do
            npm ci && break
            if [ $i -eq 5 ]; then
              echo "npm ci in build/ failed too many times" >&2
              exit 1
            fi
            echo "npm ci failed $i, trying again..."
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Install dependencies
        working-directory: ainative-studio
        run: |
          for i in {1..5}; do
            npm ci && break
            if [ $i -eq 5 ]; then
              echo "npm ci failed too many times" >&2
              exit 1
            fi
            echo "npm ci failed $i, trying again..."
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: ainative-studio-linux-arm64
          path: ainative-studio/
      
      - name: Extract build
        working-directory: ainative-studio
        run: |
          echo "Extracting build artifact..."
          mkdir -p ../VSCode-linux-arm64
          tar -xzf ainative-studio-linux-arm64.tar.gz -C ../VSCode-linux-arm64
          echo "Build extracted successfully"
          ls -la ../VSCode-linux-arm64/
      
      - name: Create DEB package
        working-directory: ainative-studio
        run: |
          mkdir -p deb-package/DEBIAN
          mkdir -p deb-package/opt/ainative-studio
          mkdir -p deb-package/usr/bin
          mkdir -p deb-package/usr/share/applications
          mkdir -p deb-package/usr/share/icons/hicolor/256x256/apps
          
          # Copy application files
          if [ -d "../VSCode-linux-arm64" ]; then
            cp -r ../VSCode-linux-arm64/* deb-package/opt/ainative-studio/
          fi
          
          # Create wrapper scripts for command line access
          echo '#!/bin/bash' > deb-package/usr/bin/ainative-studio
          echo 'exec /opt/ainative-studio/void "$@"' >> deb-package/usr/bin/ainative-studio
          chmod +x deb-package/usr/bin/ainative-studio
          
          # Create alias for ainativestudio command
          echo '#!/bin/bash' > deb-package/usr/bin/ainativestudio
          echo 'exec /opt/ainative-studio/void "$@"' >> deb-package/usr/bin/ainativestudio
          chmod +x deb-package/usr/bin/ainativestudio
          
          # Copy desktop file and icon
          cp ./ai_native_studio_icons/ai_native_studio_256x256.png deb-package/usr/share/icons/hicolor/256x256/apps/ainative-studio.png
          
          cat > deb-package/usr/share/applications/ainative-studio.desktop << 'EOF'
          [Desktop Entry]
          Type=Application
          Name=AINative Studio
          Comment=AI-powered code editor
          Exec=ainative-studio
          Icon=ainative-studio
          Categories=Development;IDE;
          EOF
          
          # Create control file
          cat > deb-package/DEBIAN/control << 'EOF'
          Package: ainative-studio
          Version: 1.0.0
          Section: editors
          Priority: optional
          Architecture: arm64
          Maintainer: AINative Studio Team <team@ainative.studio>
          Homepage: https://www.ainative.studio/
          Description: AINative Studio - AI-powered code editor
           AINative Studio is a revolutionary AI-powered code editor built on the
           robust foundation of Visual Studio Code. It provides intelligent code
           completion, AI-assisted editing, and advanced development capabilities.
           .
           Key Features:
           * AI-powered code completion and suggestions
           * Intelligent code editing and refactoring
           * Advanced debugging and testing tools
           * Extensive language support and extensions
           * Built-in terminal and Git integration
           .
           Perfect for developers who want to leverage AI to accelerate their
           coding workflow while maintaining full control over their development
           environment.
          Depends: libnss3, libatk-bridge2.0-0, libxkbfile1, libsecret-1-0
          EOF
          
          # Build DEB package
          dpkg-deb --build deb-package ainative-studio-linux-arm64.deb
      
      - name: Create RPM package
        working-directory: ainative-studio
        run: |
          
          mkdir -p rpm-build/{BUILD,RPMS,SOURCES,SPECS,SRPMS}
          
          # Create tarball for RPM
          mkdir -p ainative-studio-1.0.0
          if [ -d "../VSCode-linux-arm64" ]; then
            cp -r ../VSCode-linux-arm64/* ainative-studio-1.0.0/
          fi
          tar -czf rpm-build/SOURCES/ainative-studio-1.0.0.tar.gz ainative-studio-1.0.0
          
          # Copy logo from ai_native_studio_icons directory
          cp ./ai_native_studio_icons/ai_native_studio_256x256.png rpm-build/SOURCES/logo.png
          
          # Create spec file
          cat > rpm-build/SPECS/ainative-studio.spec << 'EOF'
          Name:           ainative-studio
          Version:        1.0.0
          Release:        1%{?dist}
          Summary:        AI-powered code editor
          
          License:        MIT
          Source0:        %{name}-%{version}.tar.gz
          Source1:        logo.png
          
          BuildArch:      noarch
          Requires:       nss, atk, libXkbfile, libsecret
          
          # Disable all binary checks for cross-architecture builds
          %global __os_install_post %{nil}
          %global _enable_debug_package 0
          %global debug_package %{nil}
          %global _binaries_in_noarch_packages_terminate_build 0
          
          %description
          AINative Studio is an AI-powered code editor built on VS Code,
          providing intelligent code completion and editing capabilities.
          
          %prep
          %setup -q
          
          %install
          mkdir -p %{buildroot}/opt/ainative-studio
          mkdir -p %{buildroot}/usr/bin
          mkdir -p %{buildroot}/usr/share/applications
          mkdir -p %{buildroot}/usr/share/icons/hicolor/256x256/apps
          
          cp -r * %{buildroot}/opt/ainative-studio/
          
          # Create wrapper scripts
          cat > %{buildroot}/usr/bin/ainative-studio << 'SCRIPT'
          #!/bin/bash
          exec /opt/ainative-studio/void "$@"
          SCRIPT
          chmod +x %{buildroot}/usr/bin/ainative-studio
          
          cat > %{buildroot}/usr/bin/ainativestudio << 'SCRIPT'
          #!/bin/bash
          exec /opt/ainative-studio/void "$@"
          SCRIPT
          chmod +x %{buildroot}/usr/bin/ainativestudio
          
          # Install icon and desktop file
          cp %{SOURCE1} %{buildroot}/usr/share/icons/hicolor/256x256/apps/ainative-studio.png
          
          cat > %{buildroot}/usr/share/applications/ainative-studio.desktop << 'DESKTOP'
          [Desktop Entry]
          Type=Application
          Name=AINative Studio
          Comment=AI-powered code editor
          Exec=ainative-studio
          Icon=ainative-studio
          Categories=Development;IDE;
          DESKTOP
          
          %files
          /opt/ainative-studio/*
          /usr/bin/ainative-studio
          /usr/bin/ainativestudio
          /usr/share/applications/ainative-studio.desktop
          /usr/share/icons/hicolor/256x256/apps/ainative-studio.png
          
          %changelog
          * Wed Jan 01 2025 AINative Studio Team <team@ainativestudio.com> - 1.0.0-1
          - Initial release
          EOF
          
          # Build RPM
          rpmbuild --define "_topdir $(pwd)/rpm-build" --define "_binaries_in_noarch_packages_terminate_build 0" -ba rpm-build/SPECS/ainative-studio.spec
          cp rpm-build/RPMS/noarch/ainative-studio-*.rpm ./ainative-studio-linux-arm64.rpm
      
      - name: Upload tar.gz artifact
        uses: actions/upload-artifact@v4
        with:
          name: ainative-studio-linux-arm64-tar
          path: ainative-studio/ainative-studio-linux-arm64.tar.gz
          retention-days: 30
      
      - name: Upload DEB package
        uses: actions/upload-artifact@v4
        with:
          name: ainative-studio-linux-arm64-deb
          path: ainative-studio/ainative-studio-linux-arm64.deb
          retention-days: 30
      
      - name: Upload RPM package
        uses: actions/upload-artifact@v4
        with:
          name: ainative-studio-linux-arm64-rpm
          path: ainative-studio/ainative-studio-linux-arm64.rpm
          retention-days: 30
      
      - name: Upload packages to release
        if: github.event_name == 'release'
        working-directory: ainative-studio
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Uploading Linux ARM64 packages to release..."
          if [ -f "ainative-studio-linux-arm64.tar.gz" ]; then
            gh release upload ${{ github.event.release.tag_name }} ainative-studio-linux-arm64.tar.gz --clobber
          fi
          if [ -f "ainative-studio-linux-arm64.deb" ]; then
            gh release upload ${{ github.event.release.tag_name }} ainative-studio-linux-arm64.deb --clobber
          fi
          if [ -f "ainative-studio-linux-arm64.rpm" ]; then
            gh release upload ${{ github.event.release.tag_name }} ainative-studio-linux-arm64.rpm --clobber
          fi