name: Windows x64 Build & Package (With Icon Fix)

on:
  workflow_dispatch:
  workflow_call:

jobs:
  build:
    runs-on: windows-latest
    timeout-minutes: 40
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: |
            ainative-studio/package-lock.json
            ainative-studio/build/package-lock.json

      - name: Install build dependencies
        working-directory: ainative-studio/build
        run: |
          for /l %%i in (1,1,5) do (
            npm ci && exit /b 0
          )
          echo "npm ci in build/ failed too many times"
          exit /b 1
        shell: cmd
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Install dependencies
        working-directory: ainative-studio
        run: |
          for /l %%i in (1,1,5) do (
            npm ci && exit /b 0
          )
          echo "npm ci failed too many times"
          exit /b 1
        shell: cmd
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Cache node build cache
        uses: actions/cache@v4
        with:
          path: |
            ainative-studio/node_modules/.cache
            ainative-studio/extensions/*/node_modules/.cache
          key: node-cache-${{ runner.os }}-${{ hashFiles('ainative-studio/package-lock.json') }}
          restore-keys: |
            node-cache-${{ runner.os }}-

      - name: Cache gulp cache
        uses: actions/cache@v4
        with:
          path: ~/.gulp-cache
          key: ${{ runner.os }}-gulp-${{ hashFiles('ainative-studio/package-lock.json', 'ainative-studio/build/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-gulp-

      - name: Build React components
        working-directory: ainative-studio
        run: npm run buildreact
        shell: cmd
        env:
          NODE_OPTIONS: "--max-old-space-size=8192"

      - name: Compile TypeScript
        working-directory: ainative-studio
        run: npm run gulp compile-build-without-mangling
        shell: cmd
        env:
          NODE_OPTIONS: "--max-old-space-size=8192"
          UV_THREADPOOL_SIZE: 64

      - name: Build all extensions
        working-directory: ainative-studio
        shell: pwsh
        run: |
          # Build extensions sequentially but efficiently
          $extensions = @(
            "configuration-editing", "css-language-features-client", "css-language-features-server",
            "typescript-language-features", "git", "git-base",
            "debug-auto-launch", "debug-server-ready", "emmet", "extension-editing",
            "github", "github-authentication", "grunt", "gulp",
            "html-language-features-client", "html-language-features-server", "ipynb", "jake",
            "json-language-features-client", "json-language-features-server",
            "markdown-language-features", "markdown-math", "media-preview",
            "merge-conflict", "terminal-suggest", "microsoft-authentication", "notebook-renderers",
            "npm", "php-language-features", "references-view", "search-result",
            "simple-browser", "tunnel-forwarding",
            "vscode-api-tests", "vscode-colorize-tests"
          )

          foreach ($ext in $extensions) {
            Write-Host "Building extension: $ext"
            try {
              npm run gulp "compile-extension:$ext"
            } catch {
              Write-Warning "Failed to build extension: $ext (continuing)"
            }
          }
        env:
          NODE_OPTIONS: "--max-old-space-size=6144"

      - name: Minify VSCode
        working-directory: ainative-studio
        run: npm run gulp minify-vscode
        shell: cmd
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_OPTIONS: "--max-old-space-size=8192"
          UV_THREADPOOL_SIZE: 64

      - name: Package Windows build
        working-directory: ainative-studio
        run: npm run gulp vscode-win32-x64-min-ci
        shell: cmd
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_OPTIONS: "--max-old-space-size=8192"

      - name: Verify build output
        working-directory: ainative-studio
        shell: pwsh
        run: |
          Write-Host "Checking for build output directories..."
          Write-Host "Current directory: $(Get-Location)"

          if (Test-Path VSCode-win32-x64) {
            Write-Host "✅ Found VSCode-win32-x64 in current directory"
            # Move to parent directory for consistency
            Move-Item -Path VSCode-win32-x64 -Destination ../VSCode-win32-x64
          } elseif (Test-Path ../VSCode-win32-x64) {
            Write-Host "✅ Found VSCode-win32-x64 in parent directory"
          } else {
            Write-Host "❌ VSCode-win32-x64 not found in expected locations"
            Write-Host "Contents of ainative-studio directory:"
            Get-ChildItem -Force | Format-Table Name, Length, LastWriteTime
            Write-Host "`nContents of parent directory:"
            Get-ChildItem -Path ../ -Force | Format-Table Name, Length, LastWriteTime
            Write-Host "`nSearching for any VSCode directories..."
            Get-ChildItem -Path ../ -Recurse -Directory -Name "VSCode*" -ErrorAction SilentlyContinue
            exit 1
          }

      # ===== ICON EMBEDDING FIX =====
      - name: Force embed application icon
        working-directory: ainative-studio
        shell: pwsh
        run: |
          Write-Host "======================================"
          Write-Host "FORCE EMBEDDING AINATIVE STUDIO ICON"
          Write-Host "======================================"

          $exePath = "../VSCode-win32-x64/AINativeStudio.exe"
          $iconPath = "resources/win32/code.ico"

          # Verify icon file exists
          if (-not (Test-Path $iconPath)) {
            Write-Host "❌ ERROR: Icon file not found at: $iconPath"
            Write-Host "Current directory: $(Get-Location)"
            Write-Host "Contents:"
            Get-ChildItem -Recurse -Filter "*.ico" | Select-Object FullName
            exit 1
          }

          Write-Host "✓ Icon file found: $iconPath"
          Write-Host "  Size: $((Get-Item $iconPath).Length) bytes"

          # Verify executable exists
          if (-not (Test-Path $exePath)) {
            Write-Host "❌ ERROR: Executable not found at: $exePath"
            exit 1
          }

          Write-Host "✓ Executable found: $exePath"
          Write-Host "  Size: $((Get-Item $exePath).Length) bytes"

          # Use rcedit from node_modules to embed the icon
          Write-Host "`nEmbedding icon using rcedit..."
          try {
            npx rcedit $exePath --set-icon $iconPath
            Write-Host "✅ Icon embedded successfully!"
          } catch {
            Write-Host "❌ ERROR: Failed to embed icon"
            Write-Host "Error details: $_"
            exit 1
          }

          Write-Host "`n======================================"
          Write-Host "Icon embedding process completed"
          Write-Host "======================================"

      # ===== CODE SIGNING SECTION =====
      - name: Import signing certificate
        if: env.WINDOWS_CERTIFICATE_BASE64 != ''
        shell: pwsh
        env:
          WINDOWS_CERTIFICATE_BASE64: ${{ secrets.WINDOWS_CERTIFICATE_BASE64 }}
          WINDOWS_CERTIFICATE_PASSWORD: ${{ secrets.WINDOWS_CERTIFICATE_PASSWORD }}
        run: |
          Write-Host "Importing code signing certificate..."

          # Decode certificate from base64
          $certBytes = [System.Convert]::FromBase64String($env:WINDOWS_CERTIFICATE_BASE64)
          $certPath = "$env:TEMP\codesign.pfx"
          [System.IO.File]::WriteAllBytes($certPath, $certBytes)

          # Import certificate to certificate store
          $securePassword = ConvertTo-SecureString -String $env:WINDOWS_CERTIFICATE_PASSWORD -Force -AsPlainText
          $cert = Import-PfxCertificate -FilePath $certPath -CertStoreLocation Cert:\CurrentUser\My -Password $securePassword

          Write-Host "Certificate imported with thumbprint: $($cert.Thumbprint)"
          echo "CERT_THUMBPRINT=$($cert.Thumbprint)" >> $env:GITHUB_ENV

          # Clean up temp file
          Remove-Item $certPath -Force

      - name: Sign main executable
        if: env.CERT_THUMBPRINT != ''
        working-directory: ainative-studio
        shell: pwsh
        run: |
          Write-Host "Signing main executable..."
          $exePath = "../VSCode-win32-x64/AINativeStudio.exe"

          if (Test-Path $exePath) {
            & "${{ github.workspace }}/scripts/windows-signing/sign-executable.ps1" `
              -FilePath $exePath `
              -Thumbprint $env:CERT_THUMBPRINT `
              -Description "AINative Studio IDE"
          } else {
            Write-Host "Main executable not found at: $exePath"
          }

      - name: Sign Node.js executable
        if: env.CERT_THUMBPRINT != ''
        working-directory: ainative-studio
        shell: pwsh
        run: |
          Write-Host "Signing Node.js executable..."
          $nodePath = "../VSCode-win32-x64/node.exe"

          if (Test-Path $nodePath) {
            & "${{ github.workspace }}/scripts/windows-signing/sign-executable.ps1" `
              -FilePath $nodePath `
              -Thumbprint $env:CERT_THUMBPRINT `
              -Description "Node.js Runtime for AINative Studio"
          }

      - name: Sign CLI executable
        if: env.CERT_THUMBPRINT != ''
        working-directory: ainative-studio
        shell: pwsh
        run: |
          Write-Host "Signing CLI executable..."
          $cliPath = "../VSCode-win32-x64/bin/code.exe"

          if (Test-Path $cliPath) {
            & "${{ github.workspace }}/scripts/windows-signing/sign-executable.ps1" `
              -FilePath $cliPath `
              -Thumbprint $env:CERT_THUMBPRINT `
              -Description "AINative Studio CLI"
          }

      - name: Create archive
        working-directory: ainative-studio
        shell: pwsh
        run: |
          Write-Host "Creating archive from VSCode-win32-x64..."
          Write-Host "Current directory: $(Get-Location)"

          if (Test-Path VSCode-win32-x64) {
            Write-Host "Found VSCode-win32-x64 in current directory"
            Set-Location VSCode-win32-x64
            7z a -tzip ../ainative-studio-win32-x64.zip .
            Set-Location ..
          } elseif (Test-Path ../VSCode-win32-x64) {
            Write-Host "Found VSCode-win32-x64 in parent directory"
            Set-Location ../VSCode-win32-x64
            7z a -tzip ../ainative-studio/ainative-studio-win32-x64.zip .
            Set-Location ../ainative-studio
          } else {
            Write-Host "❌ VSCode-win32-x64 directory not found!"
            Write-Host "Contents of current directory:"
            Get-ChildItem -Force | Format-Table Name
            Write-Host "Contents of parent directory:"
            Get-ChildItem -Path ../ -Force | Format-Table Name
            exit 1
          }
          Write-Host "Created archive: ainative-studio-win32-x64.zip"

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: ainative-studio-win32-x64-icon-fix
          path: ainative-studio/ainative-studio-win32-x64.zip
          retention-days: 30

  package:
    needs: build
    runs-on: windows-latest
    timeout-minutes: 30
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: |
            ainative-studio/package-lock.json
            ainative-studio/build/package-lock.json

      - name: Install build dependencies
        working-directory: ainative-studio/build
        run: |
          for /l %%i in (1,1,5) do (
            npm ci && exit /b 0
          )
          echo "npm ci in build/ failed too many times"
          exit /b 1
        shell: cmd
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Install dependencies
        working-directory: ainative-studio
        run: |
          for /l %%i in (1,1,5) do (
            npm ci && exit /b 0
          )
          echo "npm ci failed too many times"
          exit /b 1
        shell: cmd
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: ainative-studio-win32-x64-icon-fix
          path: ainative-studio/

      # ===== PACKAGING SECTION =====

      - name: Prepare build for installer creation
        shell: pwsh
        run: |
          Write-Host "Setting up build for installer creation..."
          # The gulp installer tasks expect the build in parent directory
          # Extract the ZIP we just created to the correct location for Inno Setup
          7z x ainative-studio/ainative-studio-win32-x64.zip -o"VSCode-win32-x64" -y
          Write-Host "Build extracted for installer creation"
          Write-Host "Verifying extraction location..."
          Get-ChildItem -Path . -Directory | Format-Table Name
          if (Test-Path VSCode-win32-x64) {
            Write-Host "✅ VSCode-win32-x64 found for installer creation"
          }

          # Create empty tools folder if it doesn't exist (required by Inno Setup)
          if (-not (Test-Path VSCode-win32-x64/tools)) {
            Write-Host "Creating tools folder for Inno Setup..."
            New-Item -ItemType Directory -Path VSCode-win32-x64/tools -Force
            # Create a dummy file to ensure the folder is not empty
            New-Item -ItemType File -Path VSCode-win32-x64/tools/.placeholder -Force
          }

      - name: Install Inno Setup
        shell: pwsh
        run: |
          Write-Host "Downloading Inno Setup..."
          $url = "https://jrsoftware.org/download.php/is.exe"
          $output = "$env:TEMP\innosetup.exe"
          Invoke-WebRequest -Uri $url -OutFile $output
          Write-Host "Installing Inno Setup..."
          Start-Process -FilePath $output -ArgumentList "/VERYSILENT /SUPPRESSMSGBOXES /NORESTART /SP-" -Wait
          Write-Host "Inno Setup installed successfully"

      - name: Build User Setup Installer
        working-directory: ainative-studio
        run: npm run gulp vscode-win32-x64-user-setup
        shell: cmd
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_OPTIONS: "--max-old-space-size=8192"

      - name: Build System Setup Installer
        working-directory: ainative-studio
        run: npm run gulp vscode-win32-x64-system-setup
        shell: cmd
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_OPTIONS: "--max-old-space-size=8192"

      - name: Find and rename installer files
        working-directory: ainative-studio
        shell: pwsh
        run: |
          Write-Host "Searching for installer files..."

          # Check for the new AINativeStudio installer files first
          $userSetup = ".build\win32-x64\user-setup\AINativeStudio-UserSetup.exe"
          $systemSetup = ".build\win32-x64\system-setup\AINativeStudio-SystemSetup.exe"

          # Rename AINativeStudio.exe to the expected names
          $actualUserSetup = ".build\win32-x64\user-setup\AINativeStudio.exe"
          $actualSystemSetup = ".build\win32-x64\system-setup\AINativeStudio.exe"

          if (Test-Path $actualUserSetup) {
            Write-Host "Renaming $actualUserSetup to AINativeStudio-UserSetup.exe"
            Rename-Item -Path $actualUserSetup -NewName "AINativeStudio-UserSetup.exe"
          }

          if (Test-Path $actualSystemSetup) {
            Write-Host "Renaming $actualSystemSetup to AINativeStudio-SystemSetup.exe"
            Rename-Item -Path $actualSystemSetup -NewName "AINativeStudio-SystemSetup.exe"
          }

          # Also check for old VSCodeSetup.exe names (fallback)
          if (-not (Test-Path $userSetup)) {
            $oldUserSetup = ".build\win32-x64\user-setup\VSCodeSetup.exe"
            if (Test-Path $oldUserSetup) {
              Write-Host "Renaming VSCode user installer to AINativeStudio-UserSetup.exe"
              Rename-Item -Path $oldUserSetup -NewName "AINativeStudio-UserSetup.exe"
            } else {
              Write-Host "⚠️ No user installer found at expected locations"
            }
          }

          if (-not (Test-Path $systemSetup)) {
            $oldSystemSetup = ".build\win32-x64\system-setup\VSCodeSetup.exe"
            if (Test-Path $oldSystemSetup) {
              Write-Host "Renaming VSCode system installer to AINativeStudio-SystemSetup.exe"
              Rename-Item -Path $oldSystemSetup -NewName "AINativeStudio-SystemSetup.exe"
            } else {
              Write-Host "⚠️ No system installer found at expected locations"
            }
          }

          # List all exe files in build directory for debugging
          Write-Host "`nAll EXE files in .build directory:"
          if (Test-Path ".build") {
            Get-ChildItem -Path ".build" -Recurse -Filter "*.exe" | Format-Table FullName, Length -AutoSize
          } else {
            Write-Host "❌ .build directory not found!"
          }

          # Verify final installer files exist
          Write-Host "`nFinal installer check:"
          if (Test-Path $userSetup) {
            Write-Host "✅ User installer: $userSetup"
          } else {
            Write-Host "❌ User installer missing: $userSetup"
          }

          if (Test-Path $systemSetup) {
            Write-Host "✅ System installer: $systemSetup"
          } else {
            Write-Host "❌ System installer missing: $systemSetup"
          }

      # ===== SIGN INSTALLERS =====
      - name: Import signing certificate for installers
        if: env.WINDOWS_CERTIFICATE_BASE64 != ''
        shell: pwsh
        env:
          WINDOWS_CERTIFICATE_BASE64: ${{ secrets.WINDOWS_CERTIFICATE_BASE64 }}
          WINDOWS_CERTIFICATE_PASSWORD: ${{ secrets.WINDOWS_CERTIFICATE_PASSWORD }}
        run: |
          Write-Host "Importing code signing certificate for installer signing..."

          # Decode certificate from base64
          $certBytes = [System.Convert]::FromBase64String($env:WINDOWS_CERTIFICATE_BASE64)
          $certPath = "$env:TEMP\codesign.pfx"
          [System.IO.File]::WriteAllBytes($certPath, $certBytes)

          # Import certificate to certificate store
          $securePassword = ConvertTo-SecureString -String $env:WINDOWS_CERTIFICATE_PASSWORD -Force -AsPlainText
          $cert = Import-PfxCertificate -FilePath $certPath -CertStoreLocation Cert:\CurrentUser\My -Password $securePassword

          Write-Host "Certificate imported with thumbprint: $($cert.Thumbprint)"
          echo "CERT_THUMBPRINT=$($cert.Thumbprint)" >> $env:GITHUB_ENV

          # Clean up temp file
          Remove-Item $certPath -Force

      - name: Sign User Setup installer
        if: env.CERT_THUMBPRINT != ''
        working-directory: ainative-studio
        shell: pwsh
        run: |
          Write-Host "Signing User Setup installer..."
          $userSetup = ".build\win32-x64\user-setup\AINativeStudio-UserSetup.exe"

          if (Test-Path $userSetup) {
            & "${{ github.workspace }}/scripts/windows-signing/sign-executable.ps1" `
              -FilePath $userSetup `
              -Thumbprint $env:CERT_THUMBPRINT `
              -Description "AINative Studio User Installer"
            Write-Host "✅ User installer signed successfully"
          } else {
            Write-Host "⚠️ User installer not found for signing"
          }

      - name: Sign System Setup installer
        if: env.CERT_THUMBPRINT != ''
        working-directory: ainative-studio
        shell: pwsh
        run: |
          Write-Host "Signing System Setup installer..."
          $systemSetup = ".build\win32-x64\system-setup\AINativeStudio-SystemSetup.exe"

          if (Test-Path $systemSetup) {
            & "${{ github.workspace }}/scripts/windows-signing/sign-executable.ps1" `
              -FilePath $systemSetup `
              -Thumbprint $env:CERT_THUMBPRINT `
              -Description "AINative Studio System Installer"
            Write-Host "✅ System installer signed successfully"
          } else {
            Write-Host "⚠️ System installer not found for signing"
          }

      # ===== Create ZIP packages to avoid MOTW =====
      - name: Create ZIP packages for MOTW avoidance
        working-directory: ainative-studio
        shell: pwsh
        run: |
          Write-Host "Creating ZIP packages to avoid MOTW..."

          $userSetup = ".build\win32-x64\user-setup\AINativeStudio-UserSetup.exe"
          $systemSetup = ".build\win32-x64\system-setup\AINativeStudio-SystemSetup.exe"

          # Create ZIP for user installer
          if (Test-Path $userSetup) {
            Write-Host "Creating ZIP for user installer..."
            7z a -tzip ".build\win32-x64\user-setup\AINativeStudio-UserSetup.zip" "$userSetup"
            Write-Host "✅ Created AINativeStudio-UserSetup.zip"
          }

          # Create ZIP for system installer
          if (Test-Path $systemSetup) {
            Write-Host "Creating ZIP for system installer..."
            7z a -tzip ".build\win32-x64\system-setup\AINativeStudio-SystemSetup.zip" "$systemSetup"
            Write-Host "✅ Created AINativeStudio-SystemSetup.zip"
          }

          Write-Host "`nZIP packages created for MOTW avoidance:"
          Write-Host "Users downloading ZIPs and extracting will bypass MOTW warnings"

      - name: Upload User Setup Installer
        uses: actions/upload-artifact@v4
        with:
          name: ainative-studio-win32-x64-user-setup-icon-fix
          path: ainative-studio/.build/win32-x64/user-setup/AINativeStudio-UserSetup.exe
          if-no-files-found: warn
          retention-days: 30

      - name: Upload User Setup ZIP (MOTW-free)
        uses: actions/upload-artifact@v4
        with:
          name: ainative-studio-win32-x64-user-setup-zip-icon-fix
          path: ainative-studio/.build/win32-x64/user-setup/AINativeStudio-UserSetup.zip
          if-no-files-found: warn
          retention-days: 30

      - name: Upload System Setup Installer
        uses: actions/upload-artifact@v4
        with:
          name: ainative-studio-win32-x64-system-setup-icon-fix
          path: ainative-studio/.build/win32-x64/system-setup/AINativeStudio-SystemSetup.exe
          if-no-files-found: warn
          retention-days: 30

      - name: Upload System Setup ZIP (MOTW-free)
        uses: actions/upload-artifact@v4
        with:
          name: ainative-studio-win32-x64-system-setup-zip-icon-fix
          path: ainative-studio/.build/win32-x64/system-setup/AINativeStudio-SystemSetup.zip
          if-no-files-found: warn
          retention-days: 30
