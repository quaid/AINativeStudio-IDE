name: Build macOS ARM64 (Signed - Checked)

on:
  workflow_dispatch:
  workflow_call:

jobs:
  build-macos-arm64:
    runs-on: macos-14
    timeout-minutes: 60
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: |
            ainative-studio/package-lock.json
            ainative-studio/build/package-lock.json

      - name: Install build dependencies
        working-directory: ainative-studio/build
        run: |
          for i in {1..5}; do
            npm ci && break
            if [ $i -eq 5 ]; then
              echo "npm ci in build/ failed too many times" >&2
              exit 1
            fi
            echo "npm ci in build/ failed $i, trying again..."
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Install dependencies
        working-directory: ainative-studio
        run: |
          for i in {1..5}; do
            npm ci && break
            if [ $i -eq 5 ]; then
              echo "npm ci failed too many times" >&2
              exit 1
            fi
            echo "npm ci failed $i, trying again..."
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Cache node build cache
        uses: actions/cache@v4
        with:
          path: |
            ainative-studio/node_modules/.cache
            ainative-studio/extensions/*/node_modules/.cache
          key: node-cache-${{ runner.os }}-arm64-${{ hashFiles('ainative-studio/package-lock.json') }}
          restore-keys: |
            node-cache-${{ runner.os }}-arm64-
            node-cache-${{ runner.os }}-

      - name: Cache gulp cache
        uses: actions/cache@v4
        with:
          path: ~/.gulp-cache
          key: ${{ runner.os }}-gulp-${{ hashFiles('ainative-studio/package-lock.json', 'ainative-studio/build/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-gulp-

      - name: Build React components
        working-directory: ainative-studio
        run: npm run buildreact
        env:
          NODE_OPTIONS: "--max-old-space-size=8192"

      - name: Build extensions in parallel
        working-directory: ainative-studio
        run: |
          # Build critical extensions first
          npm run gulp compile-extension:configuration-editing &
          npm run gulp compile-extension:css-language-features &
          npm run gulp compile-extension:typescript-language-features &
          npm run gulp compile-extension:git &
          wait

          # Build remaining extensions in parallel batches
          npm run gulp compile-extension:debug-auto-launch &
          npm run gulp compile-extension:debug-server-ready &
          npm run gulp compile-extension:emmet &
          npm run gulp compile-extension:extension-editing &
          wait

          npm run gulp compile-extension:git-base &
          npm run gulp compile-extension:github &
          npm run gulp compile-extension:github-authentication &
          npm run gulp compile-extension:grunt &
          wait

          npm run gulp compile-extension:gulp &
          npm run gulp compile-extension:html-language-features &
          npm run gulp compile-extension:ipynb &
          npm run gulp compile-extension:jake &
          wait

          npm run gulp compile-extension:json-language-features &
          npm run gulp compile-extension:markdown-language-features &
          npm run gulp compile-extension:markdown-math &
          npm run gulp compile-extension:media-preview &
          wait

          npm run gulp compile-extension:merge-conflict &
          npm run gulp compile-extension:terminal-suggest &
          npm run gulp compile-extension:microsoft-authentication &
          npm run gulp compile-extension:notebook-renderers &
          wait

          npm run gulp compile-extension:npm &
          npm run gulp compile-extension:php-language-features &
          npm run gulp compile-extension:references-view &
          npm run gulp compile-extension:search-result &
          wait

          npm run gulp compile-extension:simple-browser &
          npm run gulp compile-extension:tunnel-forwarding &
          npm run gulp compile-extension:vscode-api-tests &
          npm run gulp compile-extension:vscode-colorize-tests &
          wait

          # Finish remaining extensions
          npm run gulp compile-extension:vscode-colorize-perf-tests || true
          npm run gulp compile-extension:vscode-test-resolver || true
          npm run gulp compile-extension:vscode-selfhost-test-provider || true
          npm run gulp compile-extension:vscode-selfhost-import-aid || true
        env:
          NODE_OPTIONS: "--max-old-space-size=6144"

      - name: Build client (non-minified for faster builds)
        working-directory: ainative-studio
        run: |
          npm run gulp vscode-darwin-arm64
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_OPTIONS: "--max-old-space-size=8192"
          UV_THREADPOOL_SIZE: 64

      - name: Package
        working-directory: ainative-studio
        run: npm run gulp vscode-darwin-arm64-ci
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Verify build output
        run: |
          if [ ! -d "VSCode-darwin-arm64" ] && [ ! -d "../VSCode-darwin-arm64" ]; then
            echo "::error::Build output directory not found!"
            echo "Contents of ainative-studio directory:"
            ls -la
            echo "Contents of parent directory:"
            ls -la ../
            exit 1
          fi
        working-directory: ainative-studio

      - name: Create archive
        run: |
          if [ -d "VSCode-darwin-arm64" ]; then
            cd VSCode-darwin-arm64
            tar -czf ../ainative-studio-darwin-arm64.tar.gz .
          elif [ -d "../VSCode-darwin-arm64" ]; then
            cd ../VSCode-darwin-arm64
            tar -czf ../ainative-studio/ainative-studio-darwin-arm64.tar.gz .
          fi
        working-directory: ainative-studio

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ainative-studio-darwin-arm64
          path: ainative-studio/ainative-studio-darwin-arm64.tar.gz
          retention-days: 7

  sign-macos-arm64:
    needs: build-macos-arm64
    runs-on: macos-14
    timeout-minutes: 240
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: ainative-studio-darwin-arm64
          path: ainative-studio/

      - name: Extract build
        working-directory: ainative-studio
        run: |
          echo "Extracting build artifact..."
          tar -xzf ainative-studio-darwin-arm64.tar.gz -C ../

          # Look for app bundle in various possible locations
          if [ -d "../AINative Studio.app" ]; then
            echo "Found 'AINative Studio.app', renaming to 'AINativeStudio.app'"
            mv "../AINative Studio.app" ../AINativeStudio.app
          elif [ -d "../Void.app" ]; then
            echo "Found Void.app, renaming to AINativeStudio.app"
            mv ../Void.app ../AINativeStudio.app
          elif [ -d "../VSCode-darwin-arm64/Void.app" ]; then
            echo "Found Void.app in VSCode-darwin-arm64 directory"
            mv ../VSCode-darwin-arm64/Void.app ../AINativeStudio.app
          elif [ -d "../VSCode-darwin-arm64" ]; then
            echo "Found VSCode-darwin-arm64 directory, looking for .app bundle inside"
            app=$(find ../VSCode-darwin-arm64 -name "*.app" -type d | head -1)
            if [ -n "$app" ]; then
              echo "Found app bundle: $app"
              mv "$app" ../AINativeStudio.app
            else
              echo "No .app bundle found in VSCode-darwin-arm64 directory"
            fi
          else
            echo "No recognizable app structure found"
          fi

      - name: Setup code signing certificate
        env:
          MAC_CERT_BASE64: ${{ secrets.MAC_DEV_ID_P12_BASE64 }}
          MAC_CERT_PASSWORD: ${{ secrets.MAC_DEV_ID_P12_PASSWORD }}
        run: |
          # Debug: Check if secrets are available
          if [ -z "$MAC_CERT_BASE64" ]; then
            echo "::error::MAC_DEV_ID_P12_BASE64 secret is not set or empty"
            exit 1
          fi

          if [ -z "$MAC_CERT_PASSWORD" ]; then
            echo "::error::MAC_DEV_ID_P12_PASSWORD secret is not set or empty"
            exit 1
          fi

          echo "Secrets are available, proceeding with certificate import..."

          # Import certificate from secrets
          echo "$MAC_CERT_BASE64" | base64 --decode > certificate.p12

          # Verify certificate file was created and has content
          if [ ! -f certificate.p12 ] || [ ! -s certificate.p12 ]; then
            echo "::error::Certificate file was not created properly or is empty"
            exit 1
          fi

          echo "Certificate file created successfully"

          # Create temporary keychain
          security create-keychain -p "$MAC_CERT_PASSWORD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$MAC_CERT_PASSWORD" build.keychain

          # Import certificate
          security import certificate.p12 -k build.keychain \
            -P "$MAC_CERT_PASSWORD" \
            -T /usr/bin/codesign \
            -T /usr/bin/security

          # Allow codesign to access keychain
          security set-key-partition-list -S apple-tool:,apple: -s -k "$MAC_CERT_PASSWORD" build.keychain

          # Clean up certificate file
          rm certificate.p12

          echo "Certificate setup completed successfully"

      - name: Sign the application
        working-directory: ainative-studio
        run: |
          # Handle app name with spaces
          APP_NAME="${{ vars.APP_NAME }}"

          # Find the actual app bundle (could be AINativeStudio.app from renaming)
          if [ -d "../AINativeStudio.app" ]; then
            APP_PATH="../AINativeStudio.app"
          elif [ -d "../${APP_NAME}.app" ]; then
            APP_PATH="../${APP_NAME}.app"
          else
            echo "::error::App bundle not found"
            echo "Looking for .app bundles..."
            find .. -maxdepth 3 -name "*.app" -type d || true
            exit 1
          fi

          # Define all entitlements paths
          MAIN_ENTITLEMENTS="build/azure-pipelines/darwin/app-entitlements.plist"
          HELPER_ENTITLEMENTS="build/azure-pipelines/darwin/helper-renderer-entitlements.plist"

          # Verify entitlements files exist
          if [ ! -f "$MAIN_ENTITLEMENTS" ]; then
            echo "::error::Main entitlements file not found at $MAIN_ENTITLEMENTS"
            exit 1
          fi

          if [ ! -f "$HELPER_ENTITLEMENTS" ]; then
            echo "::error::Helper entitlements file not found at $HELPER_ENTITLEMENTS"
            exit 1
          fi

          echo "Main entitlements file found: $MAIN_ENTITLEMENTS"
          echo "Helper entitlements file found: $HELPER_ENTITLEMENTS"

          # Get the signing identity from the keychain
          echo "Available signing identities:"
          security find-identity -p codesigning -v build.keychain | cat

          # Extract the Developer ID Application identity with team ID
          CERT_NAME=$(security find-identity -p codesigning -v build.keychain | grep "Developer ID Application" | head -1 | awk -F'"' '{print $2}')

          if [ -z "$CERT_NAME" ]; then
            echo "::error::No Developer ID Application certificate found in keychain"
            exit 1
          fi

          echo "Using certificate: $CERT_NAME"

          # Sign the application using electron-osx-sign (designed for Electron/VS Code)
          echo "Signing $APP_PATH with electron-osx-sign..."
          echo "App size before signing:"
          du -sh "$APP_PATH"

          # Time the signing process
          SIGN_START=$(date +%s)

          # Use electron-osx-sign with proper entitlements for each component
          npx --yes electron-osx-sign "$APP_PATH" \
            --identity="$CERT_NAME" \
            --hardened-runtime=true \
            --no-gatekeeper-assess \
            --entitlements="$MAIN_ENTITLEMENTS" \
            --entitlements-inherit="$HELPER_ENTITLEMENTS"

          SIGN_END=$(date +%s)
          SIGN_DURATION=$((SIGN_END - SIGN_START))
          echo "Signing completed in ${SIGN_DURATION} seconds"

          # Verify the signature
          echo "Verifying signature..."
          codesign --verify --deep --strict --verbose=2 "$APP_PATH"

          # Check signature details
          echo "Signature details:"
          codesign -dvvv "$APP_PATH" 2>&1 | head -20

      - name: Verify application signature and entitlements
        working-directory: ainative-studio
        run: |
          echo "=== APPLICATION VERIFICATION ==="

          if [ -d "../AINativeStudio.app" ]; then
            APP_PATH="../AINativeStudio.app"
          else
            echo "::error::App bundle not found for verification"
            exit 1
          fi

          echo "📋 1. Main app entitlements:"
          codesign -d --entitlements :- "$APP_PATH" | plutil -convert xml1 - -o - | xmllint --format -

          echo -e "\n📋 2. Hardened runtime verification:"
          codesign -dvvv "$APP_PATH" 2>&1 | grep -E "flags|runtime"

          echo -e "\n📋 3. Critical entitlements check for Apple Silicon:"
          REQUIRED_ENTITLEMENTS=(
            "com.apple.security.cs.allow-jit"
            "com.apple.security.cs.allow-unsigned-executable-memory"
            "com.apple.security.cs.disable-library-validation"
            "com.apple.security.files.user-selected.read-write"
          )

          for entitlement in "${REQUIRED_ENTITLEMENTS[@]}"; do
            if codesign -d --entitlements :- "$APP_PATH" 2>/dev/null | grep -q "$entitlement"; then
              echo "✅ Found: $entitlement"
            else
              echo "❌ MISSING: $entitlement"
            fi
          done

          echo -e "\n📋 4. Verify NO problematic entitlements:"
          if codesign -d --entitlements :- "$APP_PATH" 2>/dev/null | grep -q "disable-executable-page-protection"; then
            echo "❌ ERROR: Found problematic disable-executable-page-protection entitlement!"
            exit 1
          else
            echo "✅ No problematic entitlements found"
          fi

          if codesign -d --entitlements :- "$APP_PATH" 2>/dev/null | grep -q "automation.apple-events"; then
            echo "❌ ERROR: Found unnecessary automation.apple-events entitlement!"
            exit 1
          else
            echo "✅ No unnecessary apple-events entitlement found"
          fi

          echo -e "\n📋 5. Helper apps verification:"
          find "$APP_PATH/Contents/Frameworks" -name "*Helper*.app" -type d | while read helper; do
            helper_name=$(basename "$helper")
            echo -e "\n--- $helper_name ---"
            codesign -dvv "$helper" 2>&1 | grep -E "Identifier|Authority|flags"
            echo "Entitlements:"
            codesign -d --entitlements :- "$helper" 2>/dev/null | grep "com.apple.security" | head -5
          done

          echo -e "\n📋 6. Signature integrity final check:"
          if codesign --verify --deep --strict --verbose=2 "$APP_PATH" 2>&1; then
            echo "✅ Signature verification PASSED"
          else
            echo "❌ Signature verification FAILED"
            exit 1
          fi

      - name: Notarize the application
        working-directory: ainative-studio
        run: |
          # Find the signed app bundle
          if [ -d "../AINativeStudio.app" ]; then
            APP_PATH="../AINativeStudio.app"
          elif [ -d "../${{ vars.APP_NAME }}.app" ]; then
            APP_PATH="../${{ vars.APP_NAME }}.app"
          else
            echo "::error::App bundle not found for notarization"
            exit 1
          fi

          echo "Creating ZIP for notarization..."
          cd ..
          ZIP_NAME="AINativeStudio-arm64-for-notarization.zip"
          ditto -c -k --keepParent "$(basename "$APP_PATH")" "ainative-studio/$ZIP_NAME"

          cd ainative-studio

          # Setup Apple API key
          echo "${{ secrets.APPLE_API_KEY_P8_BASE64 }}" | base64 --decode > AuthKey.p8

          echo "Uploading to Apple for notarization..."
          echo "ZIP file size: $(du -h "$ZIP_NAME" | cut -f1)"

          # Submit without --wait to get submission ID immediately
          SUBMIT_OUTPUT=$(xcrun notarytool submit "$ZIP_NAME" \
            --key AuthKey.p8 \
            --key-id "${{ secrets.APPLE_KEY_ID }}" \
            --issuer "${{ secrets.APPLE_ISSUER_ID }}" \
            --output-format json 2>&1)

          echo "Submit output: $SUBMIT_OUTPUT"

          SUBMISSION_ID=$(echo "$SUBMIT_OUTPUT" | jq -r '.id' 2>/dev/null)

          if [ "$SUBMISSION_ID" = "null" ] || [ -z "$SUBMISSION_ID" ]; then
            echo "::error::Failed to get submission ID from notarization"
            echo "::error::Full output was: $SUBMIT_OUTPUT"
            exit 1
          fi

          echo "Submission ID: $SUBMISSION_ID"

          # Wait for notarization to complete and check status
          echo "Waiting for notarization to complete..."
          xcrun notarytool wait "$SUBMISSION_ID" \
            --key AuthKey.p8 \
            --key-id "${{ secrets.APPLE_KEY_ID }}" \
            --issuer "${{ secrets.APPLE_ISSUER_ID }}" \
            --timeout 210m

          # Get the notarization status
          STATUS=$(xcrun notarytool info "$SUBMISSION_ID" \
            --key AuthKey.p8 \
            --key-id "${{ secrets.APPLE_KEY_ID }}" \
            --issuer "${{ secrets.APPLE_ISSUER_ID }}" \
            --output-format json | jq -r '.status')

          echo "Notarization status: $STATUS"

          if [ "$STATUS" != "Accepted" ]; then
            echo "::error::Notarization failed with status: $STATUS"
            # Get detailed log for debugging
            xcrun notarytool log "$SUBMISSION_ID" \
              --key AuthKey.p8 \
              --key-id "${{ secrets.APPLE_KEY_ID }}" \
              --issuer "${{ secrets.APPLE_ISSUER_ID }}"
            exit 1
          fi

          echo "Notarization successful! Stapling ticket to app..."

          # Staple the notarization ticket
          xcrun stapler staple "$APP_PATH"

          # Verify stapling
          echo "Verifying stapled notarization..."
          xcrun stapler validate "$APP_PATH"

          # Clean up
          rm -f AuthKey.p8 "$ZIP_NAME"

          echo "✅ App successfully signed and notarized!"

      - name: Verify notarization status
        working-directory: ainative-studio
        run: |
          echo "=== NOTARIZATION VERIFICATION ==="

          if [ -d "../AINativeStudio.app" ]; then
            APP_PATH="../AINativeStudio.app"
          else
            echo "::error::App bundle not found"
            exit 1
          fi

          echo "📋 1. Stapler validation:"
          xcrun stapler validate "$APP_PATH"

          echo -e "\n📋 2. Gatekeeper assessment:"
          spctl -a -vvv "$APP_PATH" 2>&1 || true

          echo -e "\n📋 3. Notarization ticket info:"
          spctl --assess --verbose=4 "$APP_PATH" 2>&1 | head -20

          echo "✅ App is notarized and ready for distribution"

      - name: Create and sign DMG
        working-directory: ainative-studio
        run: |
          # Find the signed app bundle
          if [ -d "../AINativeStudio.app" ]; then
            ACTUAL_APP_NAME="AINativeStudio"
            APP_PATH="../AINativeStudio.app"
          elif [ -d "../AINative Studio.app" ]; then
            ACTUAL_APP_NAME="AINative Studio"
            APP_PATH="../AINative Studio.app"
          else
            echo "Error: Cannot find signed app bundle for DMG creation"
            ls -la ../
            exit 1
          fi

          echo "Creating DMG from signed app: ${ACTUAL_APP_NAME}.app"

          # Create a temporary directory for DMG contents
          mkdir -p dmg-temp

          # Copy the signed app bundle
          cp -R "$APP_PATH" dmg-temp/
          echo "Copied ${ACTUAL_APP_NAME}.app to DMG contents"

          # Create Applications symlink
          ln -s /Applications dmg-temp/Applications

          # Create DMG
          DMG_PATH="${ACTUAL_APP_NAME}-darwin-arm64-signed.dmg"
          hdiutil create -volname "${ACTUAL_APP_NAME}" \
                        -srcfolder dmg-temp \
                        -ov -format UDZO \
                        "$DMG_PATH"

          # Clean up temp directory
          rm -rf dmg-temp
          echo "DMG created: $DMG_PATH"

          # Get signing identity (should be available from previous steps)
          CERT_NAME=$(security find-identity -p codesigning -v build.keychain | grep "Developer ID Application" | head -1 | awk -F'"' '{print $2}')
          if [ -z "$CERT_NAME" ]; then
            echo "::error::No Developer ID Application certificate found for DMG signing"
            exit 1
          fi
          echo "Using certificate for DMG: $CERT_NAME"

          # Sign the DMG
          echo "Signing DMG..."
          codesign --force --sign "$CERT_NAME" \
                   --options runtime \
                   --timestamp \
                   "$DMG_PATH"

          # Verify DMG signature
          echo "Verifying DMG signature..."
          codesign --verify --deep --strict --verbose=2 "$DMG_PATH"

          # Notarize the DMG
          echo "Notarizing DMG..."
          DMG_ZIP="${DMG_PATH}.zip"
          zip -q "$DMG_ZIP" "$DMG_PATH"

          # Create AuthKey file for notarization (reuse from previous step)
          echo "${{ secrets.APPLE_API_KEY_P8_BASE64 }}" | base64 --decode > AuthKey.p8

          xcrun notarytool submit "$DMG_ZIP" \
                   --key AuthKey.p8 \
                   --key-id "${{ secrets.APPLE_KEY_ID }}" \
                   --issuer "${{ secrets.APPLE_ISSUER_ID }}" \
                   --wait

          # Clean up
          rm -f AuthKey.p8 "$DMG_ZIP"

          # Staple the notarization ticket to DMG
          echo "Stapling notarization ticket to DMG..."
          xcrun stapler staple "$DMG_PATH"

          # Verify stapling
          echo "Verifying stapled DMG..."
          xcrun stapler validate "$DMG_PATH"
          codesign --verify --deep --strict --verbose=2 "$DMG_PATH"

          echo "✅ DMG signed, notarized, and stapled successfully!"

      - name: Verify DMG signature and notarization
        working-directory: ainative-studio
        run: |
          echo "=== DMG VERIFICATION ==="

          DMG_PATH=$(find . -name "*-darwin-arm64-signed.dmg" | head -1)
          if [ -z "$DMG_PATH" ]; then
            echo "::error::DMG file not found"
            exit 1
          fi

          echo "Found DMG: $DMG_PATH"

          echo "📋 1. DMG signature details:"
          codesign -dvvv "$DMG_PATH" 2>&1

          echo -e "\n📋 2. DMG signature verification:"
          if codesign --verify --deep --strict --verbose=2 "$DMG_PATH" 2>&1; then
            echo "✅ DMG signature valid"
          else
            echo "❌ DMG signature invalid"
            exit 1
          fi

          echo -e "\n📋 3. DMG notarization status:"
          xcrun stapler validate "$DMG_PATH"

          echo -e "\n📋 4. DMG Gatekeeper check:"
          spctl -a -t open --context context:primary-signature -vv "$DMG_PATH" 2>&1

          echo -e "\n📋 5. Verify app inside DMG:"
          # Mount DMG temporarily
          MOUNT_POINT=$(hdiutil attach "$DMG_PATH" -nobrowse -noverify -noautoopen | grep "/Volumes" | tail -1 | awk -F'\t' '{print $NF}')

          if [ -n "$MOUNT_POINT" ]; then
            echo "DMG mounted at: $MOUNT_POINT"

            # Find app in DMG
            APP_IN_DMG=$(find "$MOUNT_POINT" -name "*.app" -maxdepth 1 | head -1)
            if [ -n "$APP_IN_DMG" ]; then
              echo "Found app in DMG: $(basename "$APP_IN_DMG")"

              echo -e "\nApp signature quick check:"
              codesign --verify --verbose "$APP_IN_DMG"

              echo -e "\nApp entitlements count:"
              ENTITLEMENT_COUNT=$(codesign -d --entitlements :- "$APP_IN_DMG" 2>/dev/null | grep "com.apple.security" | wc -l)
              echo "$ENTITLEMENT_COUNT entitlement keys found"

              echo -e "\nKey entitlements present:"
              codesign -d --entitlements :- "$APP_IN_DMG" 2>/dev/null | grep -E "allow-jit|unsigned-executable|library-validation|files.user-selected" | head -5
            fi

            # Unmount DMG
            hdiutil detach "$MOUNT_POINT" -quiet
          else
            echo "::warning::Could not mount DMG for internal verification"
          fi

          echo -e "\n✅ DMG verification complete"

      - name: Generate signing summary report
        working-directory: ainative-studio
        run: |
          echo "=== SIGNING SUMMARY REPORT ==="
          echo ""
          echo "## Build Information"
          echo "- Build Number: #${{ github.run_number }}"
          echo "- Commit: ${{ github.sha }}"
          echo "- Date: $(date)"
          echo ""

          if [ -d "../AINativeStudio.app" ]; then
            APP_PATH="../AINativeStudio.app"
          else
            APP_PATH="../AINative Studio.app"
          fi

          DMG_PATH=$(find . -name "*-darwin-arm64-signed.dmg" | head -1)

          echo "## Signature Details"
          codesign -dvv "$APP_PATH" 2>&1 | grep -E "Identifier|Authority|TeamIdentifier|Timestamp|Format" | sed 's/^/- /'

          echo ""
          echo "## Entitlements Summary"
          ENTITLEMENT_COUNT=$(codesign -d --entitlements :- "$APP_PATH" 2>/dev/null | grep "com.apple.security" | wc -l | tr -d ' ')
          echo "- Total entitlements: $ENTITLEMENT_COUNT"
          echo "- Key entitlements:"
          codesign -d --entitlements :- "$APP_PATH" 2>/dev/null | grep -E "allow-jit|unsigned-executable|library-validation|files.user-selected" | head -5 | sed 's/^/  - /'

          echo ""
          echo "## Verification Status"
          echo "- ✅ Code signature: Valid"
          echo "- ✅ Notarization: Accepted and stapled"
          echo "- ✅ DMG signed: Yes"
          echo "- ✅ Hardened runtime: Enabled"
          echo "- ✅ Gatekeeper: Ready"
          echo "- ✅ M4 MacBook Fix: Applied (removed problematic entitlements)"

          echo ""
          echo "## Artifacts"
          if [ -n "$DMG_PATH" ]; then
            DMG_SIZE=$(du -h "$DMG_PATH" | cut -f1)
            echo "- DMG size: $DMG_SIZE"
          fi
          echo "- App identifier: $(codesign -dvv "$APP_PATH" 2>&1 | grep "Identifier=" | cut -d= -f2)"

          # Save report to file
          {
            echo "# Signing Report - Checked Build"
            echo ""
            echo "Build: #${{ github.run_number }}"
            echo "Date: $(date)"
            echo ""
            echo "## Entitlements Applied"
            codesign -d --entitlements :- "$APP_PATH" 2>/dev/null | grep "com.apple.security"
            echo ""
            echo "## M4 MacBook Fix"
            echo "- Removed: com.apple.security.cs.disable-executable-page-protection (causes Code 5)"
            echo "- Removed: com.apple.security.automation.apple-events (unnecessary)"
            echo "- Added: com.apple.security.files.user-selected.read-write (required for file operations)"
          } > signing-report.md

          echo ""
          echo "=== END OF REPORT ==="

      - name: Create signed archive
        working-directory: ainative-studio
        run: |
          # Find the actual app name (it was renamed during signing steps)
          if [ -d "../AINativeStudio.app" ]; then
            ACTUAL_APP_NAME="AINativeStudio"
          elif [ -d "../AINative Studio.app" ]; then
            ACTUAL_APP_NAME="AINative Studio"
          else
            echo "Error: Cannot find signed app bundle"
            ls -la ../
            exit 1
          fi

          echo "Found app: ${ACTUAL_APP_NAME}.app"
          tar -czf ainative-studio-darwin-arm64-signed.tar.gz -C .. "${ACTUAL_APP_NAME}.app"

      - name: Upload signed artifact
        uses: actions/upload-artifact@v4
        with:
          name: ainative-studio-darwin-arm64-signed
          path: ainative-studio/ainative-studio-darwin-arm64-signed.tar.gz
          retention-days: 7

      - name: Upload signed DMG artifact
        uses: actions/upload-artifact@v4
        with:
          name: ainative-studio-darwin-arm64-signed-dmg-temp
          path: ainative-studio/*-darwin-arm64-signed.dmg
          retention-days: 1

      - name: Upload verification report
        uses: actions/upload-artifact@v4
        with:
          name: signing-verification-report-checked
          path: ainative-studio/signing-report.md
          retention-days: 30

  package:
    needs: sign-macos-arm64
    runs-on: macos-14
    timeout-minutes: 30
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download signed artifact
        uses: actions/download-artifact@v4
        with:
          name: ainative-studio-darwin-arm64-signed
          path: ainative-studio/

      - name: Download signed DMG artifact
        uses: actions/download-artifact@v4
        with:
          name: ainative-studio-darwin-arm64-signed-dmg-temp
          path: ainative-studio/

      - name: Extract signed build
        working-directory: ainative-studio
        run: |
          echo "Extracting signed build artifact..."
          tar -xzf ainative-studio-darwin-arm64-signed.tar.gz -C ../
          echo "Contents after extraction:"
          ls -la ../

      - name: Create ZIP archive
        working-directory: ainative-studio
        run: |
          echo "Creating ZIP archive..."
          # Find the actual app name
          if [ -d "../AINativeStudio.app" ]; then
            ACTUAL_APP_NAME="AINativeStudio"
          elif [ -d "../AINative Studio.app" ]; then
            ACTUAL_APP_NAME="AINative Studio"
          else
            echo "ERROR: No app bundle found - cannot create ZIP"
            ls -la ../
            exit 1
          fi

          echo "Found app: ${ACTUAL_APP_NAME}.app"
          cd ..
          zip -r -y ainative-studio/${ACTUAL_APP_NAME}-darwin-arm64-signed.zip "${ACTUAL_APP_NAME}.app"
          echo "ZIP archive created successfully"

      - name: Upload ZIP artifact
        uses: actions/upload-artifact@v4
        with:
          name: ainative-studio-darwin-arm64-signed-checked-zip
          path: ainative-studio/*-darwin-arm64-signed.zip
          retention-days: 30

      - name: Upload DMG artifact
        uses: actions/upload-artifact@v4
        with:
          name: ainative-studio-darwin-arm64-signed-checked-dmg
          path: ainative-studio/*-darwin-arm64-signed.dmg
          retention-days: 30