name: Release All Successful Builds

on:
  workflow_dispatch:
    inputs:
      version_tag:
        description: 'Version tag for the release (e.g., v1.0.0)'
        required: true
        type: string
      release_name:
        description: 'Release name (leave empty to use version tag)'
        required: false
        type: string
      release_notes:
        description: 'Release notes'
        required: false
        type: string
        default: 'Release of AINative Studio IDE with latest working builds from all platforms'
      prerelease:
        description: 'Mark as pre-release'
        required: false
        type: boolean
        default: false

permissions:
  contents: write
  actions: read

jobs:
  gather-and-release:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Find latest successful builds
        id: find-builds
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            
            // Define all build workflows to check (only existing working workflows)
            const workflows = [
              // Linux x64 - multiple package types
              { file: 'linux_x64.yml', artifact: 'ainative-studio-linux-x64-tar' },
              { file: 'linux_x64.yml', artifact: 'ainative-studio-linux-x64-deb' },
              { file: 'linux_x64.yml', artifact: 'ainative-studio-linux-x64-rpm' },
              { file: 'linux_x64.yml', artifact: 'ainative-studio-linux-x64-appimage' },
              
              // Linux ARM64 - multiple package types
              { file: 'build-linux-arm64.yml', artifact: 'ainative-studio-linux-arm64-tar' },
              { file: 'build-linux-arm64.yml', artifact: 'ainative-studio-linux-arm64-deb' },
              { file: 'build-linux-arm64.yml', artifact: 'ainative-studio-linux-arm64-rpm' },
              
              // Linux ARM - multiple package types
              { file: 'build-linux-arm.yml', artifact: 'ainative-studio-linux-armhf-tar' },
              { file: 'build-linux-arm.yml', artifact: 'ainative-studio-linux-armhf-deb' },
              { file: 'build-linux-arm.yml', artifact: 'ainative-studio-linux-armhf-rpm' },
              
              // Windows x64 - zip + installers (with icon fix)
              { file: 'windows-x64-with-icon-fix.yml', artifact: 'ainative-studio-win32-x64-icon-fix' },
              { file: 'windows-x64-with-icon-fix.yml', artifact: 'ainative-studio-win32-x64-user-setup-icon-fix' },
              { file: 'windows-x64-with-icon-fix.yml', artifact: 'ainative-studio-win32-x64-system-setup-icon-fix' },
              
              // Windows ARM64 - zip + installers (with icon fix)
              { file: 'windows-arm64-with-icon-fix.yml', artifact: 'ainative-studio-win32-arm64-icon-fix' },
              { file: 'windows-arm64-with-icon-fix.yml', artifact: 'ainative-studio-win32-arm64-user-setup-icon-fix' },
              { file: 'windows-arm64-with-icon-fix.yml', artifact: 'ainative-studio-win32-arm64-system-setup-icon-fix' },
              
              // macOS x64 - zip + dmg (signed)
              { file: 'build-macos-x64-signed.yml', artifact: 'ainative-studio-darwin-x64-signed-zip' },
              { file: 'build-macos-x64-signed.yml', artifact: 'ainative-studio-darwin-x64-signed-dmg' },
              
              // macOS ARM64 - zip + dmg (signed)
              { file: 'build-macos-arm64-signed-checked.yml', artifact: 'ainative-studio-darwin-arm64-signed-checked-zip' },
              { file: 'build-macos-arm64-signed-checked.yml', artifact: 'ainative-studio-darwin-arm64-signed-checked-dmg' }
            ];
            
            const successfulRuns = [];
            
            // Group workflows by file to avoid duplicates
            const workflowGroups = {};
            workflows.forEach(workflow => {
              if (!workflowGroups[workflow.file]) {
                workflowGroups[workflow.file] = [];
              }
              workflowGroups[workflow.file].push(workflow.artifact);
            });
            
            for (const [workflowFile, artifacts] of Object.entries(workflowGroups)) {
              try {
                const runs = await github.rest.actions.listWorkflowRuns({
                  owner,
                  repo,
                  workflow_id: workflowFile,
                  status: 'success',
                  per_page: 1
                });
                
                if (runs.data.workflow_runs.length > 0) {
                  const run = runs.data.workflow_runs[0];
                  
                  // Add each artifact from this workflow run
                  for (const artifactName of artifacts) {
                    successfulRuns.push({
                      workflow: workflowFile,
                      artifact: artifactName,
                      runId: run.id,
                      sha: run.head_sha.substring(0, 7),
                      date: run.created_at
                    });
                  }
                  console.log(`✅ Found successful run for ${workflowFile}: #${run.id} with ${artifacts.length} artifacts`);
                } else {
                  console.log(`⚠️ No successful runs found for ${workflowFile}`);
                }
              } catch (error) {
                console.log(`⚠️ Workflow ${workflowFile} not found or error: ${error.message}`);
              }
            }
            
            // Save run IDs for later steps
            core.setOutput('runs', JSON.stringify(successfulRuns));
            
            // Create summary
            let summary = `Found ${successfulRuns.length} successful builds:\n`;
            successfulRuns.forEach(run => {
              summary += `- ${run.artifact} (run #${run.runId})\n`;
            });
            console.log(summary);
            
            return successfulRuns;

      - name: Download all successful artifacts
        uses: actions/github-script@v7
        with:
          script: |
            const runs = JSON.parse('${{ steps.find-builds.outputs.runs }}');
            
            for (const run of runs) {
              console.log(`Downloading ${run.artifact} from run #${run.runId}...`);
              
              try {
                // Use GitHub CLI to download artifacts
                await exec.exec('gh', [
                  'run', 'download', run.runId.toString(),
                  '-n', run.artifact,
                  '-D', `./artifacts/${run.artifact}`
                ], {
                  env: {
                    ...process.env,
                    GH_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
                  },
                  ignoreReturnCode: true
                });
                
                console.log(`✅ Downloaded ${run.artifact}`);
              } catch (error) {
                console.log(`⚠️ Failed to download ${run.artifact}: ${error.message}`);
                console.log(`This might be expected if the artifact doesn't exist for this workflow run.`);
              }
            }

      - name: Rename artifacts to release format
        run: |
          echo "=== Renaming artifacts to AINativeStudio-{version}-{OS}-{arch}.{ext} format ==="
          VERSION="${{ inputs.version_tag }}"

          if [ -d "./artifacts" ]; then
            # Make all AppImage files executable first
            find ./artifacts -name "*.AppImage" -exec chmod +x {} \;

            # Create a staging directory for renamed files
            mkdir -p ./release-files

            # Linux x64 packages
            [ -f "./artifacts/ainative-studio-linux-x64-tar/ainative-studio-linux-x64.tar.gz" ] && \
              cp "./artifacts/ainative-studio-linux-x64-tar/ainative-studio-linux-x64.tar.gz" \
                 "./release-files/AINativeStudio-${VERSION}-Linux-x64.tar.gz"

            [ -f "./artifacts/ainative-studio-linux-x64-deb/ainative-studio-linux-x64.deb" ] && \
              cp "./artifacts/ainative-studio-linux-x64-deb/ainative-studio-linux-x64.deb" \
                 "./release-files/AINativeStudio-${VERSION}-Linux-x64.deb"

            [ -f "./artifacts/ainative-studio-linux-x64-rpm/ainative-studio-linux-x64.rpm" ] && \
              cp "./artifacts/ainative-studio-linux-x64-rpm/ainative-studio-linux-x64.rpm" \
                 "./release-files/AINativeStudio-${VERSION}-Linux-x64.rpm"

            [ -f "./artifacts/ainative-studio-linux-x64-appimage/ainative-studio-linux-x64.AppImage" ] && \
              cp "./artifacts/ainative-studio-linux-x64-appimage/ainative-studio-linux-x64.AppImage" \
                 "./release-files/AINativeStudio-${VERSION}-Linux-x64.AppImage"

            # Linux ARM64 packages
            [ -f "./artifacts/ainative-studio-linux-arm64-tar/ainative-studio-linux-arm64.tar.gz" ] && \
              cp "./artifacts/ainative-studio-linux-arm64-tar/ainative-studio-linux-arm64.tar.gz" \
                 "./release-files/AINativeStudio-${VERSION}-Linux-arm64.tar.gz"

            [ -f "./artifacts/ainative-studio-linux-arm64-deb/ainative-studio-linux-arm64.deb" ] && \
              cp "./artifacts/ainative-studio-linux-arm64-deb/ainative-studio-linux-arm64.deb" \
                 "./release-files/AINativeStudio-${VERSION}-Linux-arm64.deb"

            [ -f "./artifacts/ainative-studio-linux-arm64-rpm/ainative-studio-linux-arm64.rpm" ] && \
              cp "./artifacts/ainative-studio-linux-arm64-rpm/ainative-studio-linux-arm64.rpm" \
                 "./release-files/AINativeStudio-${VERSION}-Linux-arm64.rpm"

            # Linux ARM packages
            [ -f "./artifacts/ainative-studio-linux-armhf-tar/ainative-studio-linux-armhf.tar.gz" ] && \
              cp "./artifacts/ainative-studio-linux-armhf-tar/ainative-studio-linux-armhf.tar.gz" \
                 "./release-files/AINativeStudio-${VERSION}-Linux-armhf.tar.gz"

            [ -f "./artifacts/ainative-studio-linux-armhf-deb/ainative-studio-linux-armhf.deb" ] && \
              cp "./artifacts/ainative-studio-linux-armhf-deb/ainative-studio-linux-armhf.deb" \
                 "./release-files/AINativeStudio-${VERSION}-Linux-armhf.deb"

            [ -f "./artifacts/ainative-studio-linux-armhf-rpm/ainative-studio-linux-armhf.rpm" ] && \
              cp "./artifacts/ainative-studio-linux-armhf-rpm/ainative-studio-linux-armhf.rpm" \
                 "./release-files/AINativeStudio-${VERSION}-Linux-armhf.rpm"

            # Windows x64 packages (with icon fix)
            [ -f "./artifacts/ainative-studio-win32-x64-icon-fix/ainative-studio-win32-x64.zip" ] && \
              cp "./artifacts/ainative-studio-win32-x64-icon-fix/ainative-studio-win32-x64.zip" \
                 "./release-files/AINativeStudio-${VERSION}-Windows-x64.zip"

            [ -f "./artifacts/ainative-studio-win32-x64-user-setup-icon-fix/AINativeStudio-UserSetup.exe" ] && \
              cp "./artifacts/ainative-studio-win32-x64-user-setup-icon-fix/AINativeStudio-UserSetup.exe" \
                 "./release-files/AINativeStudio-${VERSION}-Windows-x64-UserSetup.exe"

            [ -f "./artifacts/ainative-studio-win32-x64-system-setup-icon-fix/AINativeStudio-SystemSetup.exe" ] && \
              cp "./artifacts/ainative-studio-win32-x64-system-setup-icon-fix/AINativeStudio-SystemSetup.exe" \
                 "./release-files/AINativeStudio-${VERSION}-Windows-x64-SystemSetup.exe"

            # Windows ARM64 packages (with icon fix)
            [ -f "./artifacts/ainative-studio-win32-arm64-icon-fix/ainative-studio-win32-arm64.zip" ] && \
              cp "./artifacts/ainative-studio-win32-arm64-icon-fix/ainative-studio-win32-arm64.zip" \
                 "./release-files/AINativeStudio-${VERSION}-Windows-arm64.zip"

            [ -f "./artifacts/ainative-studio-win32-arm64-user-setup-icon-fix/AINativeStudio-UserSetup.exe" ] && \
              cp "./artifacts/ainative-studio-win32-arm64-user-setup-icon-fix/AINativeStudio-UserSetup.exe" \
                 "./release-files/AINativeStudio-${VERSION}-Windows-arm64-UserSetup.exe"

            [ -f "./artifacts/ainative-studio-win32-arm64-system-setup-icon-fix/AINativeStudio-SystemSetup.exe" ] && \
              cp "./artifacts/ainative-studio-win32-arm64-system-setup-icon-fix/AINativeStudio-SystemSetup.exe" \
                 "./release-files/AINativeStudio-${VERSION}-Windows-arm64-SystemSetup.exe"

            # macOS x64 packages (use find because file name could be "AINativeStudio" or "AINative Studio")
            MACOS_X64_ZIP=$(find ./artifacts/ainative-studio-darwin-x64-signed-zip/ -name "*-darwin-x64-signed.zip" -type f 2>/dev/null | head -1)
            [ -n "$MACOS_X64_ZIP" ] && \
              cp "$MACOS_X64_ZIP" "./release-files/AINativeStudio-${VERSION}-macOS-x64.zip"

            MACOS_X64_DMG=$(find ./artifacts/ainative-studio-darwin-x64-signed-dmg/ -name "*-darwin-x64-signed.dmg" -type f 2>/dev/null | head -1)
            [ -n "$MACOS_X64_DMG" ] && \
              cp "$MACOS_X64_DMG" "./release-files/AINativeStudio-${VERSION}-macOS-x64.dmg"

            # macOS ARM64 packages (use find because file name could be "AINativeStudio" or "AINative Studio")
            MACOS_ARM64_ZIP=$(find ./artifacts/ainative-studio-darwin-arm64-signed-checked-zip/ -name "*-darwin-arm64-signed.zip" -type f 2>/dev/null | head -1)
            [ -n "$MACOS_ARM64_ZIP" ] && \
              cp "$MACOS_ARM64_ZIP" "./release-files/AINativeStudio-${VERSION}-macOS-arm64.zip"

            MACOS_ARM64_DMG=$(find ./artifacts/ainative-studio-darwin-arm64-signed-checked-dmg/ -name "*-darwin-arm64-signed.dmg" -type f 2>/dev/null | head -1)
            [ -n "$MACOS_ARM64_DMG" ] && \
              cp "$MACOS_ARM64_DMG" "./release-files/AINativeStudio-${VERSION}-macOS-arm64.dmg"

            echo "=== Renamed Release Files ==="
            ls -lh ./release-files/
          else
            echo "No artifacts found"
          fi

      - name: Generate release body
        id: release-body
        uses: actions/github-script@v7
        with:
          script: |
            const runs = JSON.parse('${{ steps.find-builds.outputs.runs }}');
            
            let body = `${{ inputs.release_notes }}\n\n`;
            body += `## Available Platform Builds\n\n`;
            
            const platforms = {
              'linux-x64-tar': '🐧 Linux x64 (TAR.GZ)',
              'linux-x64-deb': '🐧 Linux x64 (DEB)',
              'linux-x64-rpm': '🐧 Linux x64 (RPM)',
              'linux-x64-appimage': '🐧 Linux x64 (AppImage)',
              'linux-arm64-tar': '🐧 Linux ARM64 (TAR.GZ)',
              'linux-arm64-deb': '🐧 Linux ARM64 (DEB)',
              'linux-arm64-rpm': '🐧 Linux ARM64 (RPM)',
              'linux-armhf-tar': '🐧 Linux ARM (TAR.GZ)',
              'linux-armhf-deb': '🐧 Linux ARM (DEB)',
              'linux-armhf-rpm': '🐧 Linux ARM (RPM)',
              'win32-x64': '🪟 Windows x64 (ZIP)',
              'win32-x64-user-setup': '🪟 Windows x64 (User Installer)',
              'win32-x64-system-setup': '🪟 Windows x64 (System Installer)',
              'win32-arm64': '🪟 Windows ARM64 (ZIP)',
              'win32-arm64-user-setup': '🪟 Windows ARM64 (User Installer)',
              'win32-arm64-system-setup': '🪟 Windows ARM64 (System Installer)',
              'darwin-x64-zip': '🍎 macOS Intel (ZIP)',
              'darwin-x64-dmg': '🍎 macOS Intel (DMG)',
              'darwin-arm64-zip': '🍎 macOS Apple Silicon (ZIP)',
              'darwin-arm64-dmg': '🍎 macOS Apple Silicon (DMG)'
            };
            
            runs.forEach(run => {
              const platform = run.artifact.replace('ainative-studio-', '');
              const platformName = platforms[platform] || platform;
              body += `- **${platformName}**: Build #${run.runId} (${run.sha})\n`;
            });
            
            body += `\n## Installation\n\n`;
            body += `### 🐧 Linux\n`;
            body += `- **DEB packages** (Ubuntu/Debian): \`sudo dpkg -i ainative-studio-*.deb\`\n`;
            body += `- **RPM packages** (RHEL/Fedora): \`sudo rpm -i ainative-studio-*.rpm\`\n`;
            body += `- **AppImage** (Universal): Download and run (already executable)\n`;
            body += `- **TAR.GZ**: Extract and run \`./ainative-studio\` or \`./ainativestudio\` or \`./void\`\n\n`;
            body += `### 🪟 Windows\n`;
            body += `- **Installers**: Download \`.exe\` and run (User or System installer)\n`;
            body += `- **ZIP**: Extract and run \`Code.exe\`\n\n`;
            body += `### 🍎 macOS\n`;
            body += `- **DMG**: Download, mount, and drag to Applications folder\n`;
            body += `- **ZIP**: Extract \`AINativeStudio.app\` to Applications folder\n\n`;
            body += `## Release Information\n`;
            body += `This release contains the latest successful builds from each platform workflow. `;
            body += `Each build represents the most recent working version for that platform.\n\n`;
            body += `Total platforms in this release: ${runs.length}\n`;
            
            core.setOutput('body', body);
            return body;

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ inputs.version_tag }}
          name: ${{ inputs.release_name || inputs.version_tag }}
          body: ${{ steps.release-body.outputs.body }}
          draft: false
          prerelease: ${{ inputs.prerelease }}
          fail_on_unmatched_files: false
          files: |
            ./release-files/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}